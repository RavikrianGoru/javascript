JavaScript:
	JavaScript is a versatile programming language primarily used for web development. It runs in the browser and is often used to make websites interactive.
	Client-side programming languages
	Written code get executed in brouser with help on JavaScript Engine.
	JavaScript has reach set of libraries & frame-works for front-end and back-end.
	1) Frontend
		react
		angular....
	2) Backend
		node Js
		express js
		next js...
		
I) In-line java script
II) External JavaScript
	
	
JavaScript variables:
	1) var : can be defined and assign multiple times. 
		var a="ravi";
		console.log(a);
		var a="kiram";
		console.log(a);
		
	2) let: can be assign multiple times but not allowed to re-define.
		let a ="ravi";
		console.log(a);
		// let a="kiran"; ----> Error
		a="kiran";
		console.log(a);
		
	3) const:can be define and assign only once.
	const a="ravi";
	//const a="kiran"; ----> Error
	//a="kiran"; ----> Error
	
Data types:
	
	Primitive Datatypes	
		1) String
			var a="ravi";
		2) Number
			var a=10;
			var b=10.0;
		3) Boolean
			var a=true;
			var b=false;
			var test=10>20;
		4) Null
			let a=null;
		5)Undefined
			let a;
	Complex Datatypes	
		6)Arrya		[]
			let fruites=["apple", "mango", 55, {name:"ravi"} ];
			console.log(fruites);
			
		7)Object	{}
			const games={
				cricket:"Ravi",
				football:"Kiran"
				}
			console.log(games);
*** console.log(typeof games); console.log(typeof fruites);-------------- return Object, everything in javascript : objects
*** console.log(Array.isArray(fruites)):----true

Operators:
	Arithmetic:
		1) Addition: +
			var a=30;
			var b=20;
			document.write("Addition",a+b);
		2) Subtraction: -
			var a=30;
			var b=20;
			document.write("Subtraction",a-b);
		3) Multiplication: 
		document.write("Multiplication",a*b);
		4) Division: 
		document.write("Division",a/b);
		5) Modulus/Remainder: 
		document.write("Modulus",a%b);
		6) Increment: 
		a++;
		document.write("Increment",a);
		7) Decrement: 
		a--;
		document.write("Decrement",a);
		
		8) equality ==
		9) not equal !==
		10) greater than>
		11) less than <
		12) logical Not !
		13) logical AND &&
		14) logical OR ||
		

Control flow / conditions
	1) if
	Ex:
		var game="cricket";
		let captain="ravi";
		if(game == "cricket")
		{
			document.write("Matche captain is",captain);
		}
		
	2) if-else
		var game="cricket";
		let captain="ravi";
		if(game == "Cricket")
		{
			document.write("Matche captain is",captain);
		}else
		{
			document.write("Sorry wront ans");
		}

	3) if else-if
		var x=10;
		var y=20;
		var z=30;
		
		if(x==y)
		{
			document.write("x==y");
		}else if(x>y)
		{
			document.write("x>y");
		}else if(y>z)
		{
			document.write("y>z");
		}else if(x!==y)
		{
			document.write("x!==y");
		}else
		{
			document.write("No condition met");
		}
	4) switch
		var x=10;
		var y=20;
		var z=30;
		
Ternary operator:
	condition=true?"true statement":"false statement";
	document.write( 
			((2+3) == 5)? "Yes correct":"No wrong");
			
Dailog Box:
	1) alert
		alert("Something");
	2) prompt
		prompt("Something);
	3) confirm
	
		var areYouSure=confirm("Are you sure?");
		document.write(areYouSure);-------->true or false
Type conversions:
	1) typeof
		var a="55";
		var b=44;
		document.write(typeof a);----------->string
		document.write(typeof b);----------->number
		
		var z=parseInt(a);
		document.write(typeof z);----------->number
		
		var x=string(b);
		document.write(typeof x);----------->string
-----------------------------------------		
switch-case statements:
	
	1) Syntax:
		switch(expresssion)
		{
			case value1:
						statements;
						break;
			case value2:
						statements;
						break;
			case value3:
						statements;
						break;
			default:
						statements;
						break;
		}
	
Example:1
		
	var a=100;
	
	switch(a)
	{
		case 5:
				document.write("a value is 5");
				break;
		case a<10:
				document.write("a < 10");
				break;
		case a>10:
				document.write("a > 10");
				break;
		default:
				document.write("no condition met");
				break;
	}
		
---------------------
	let name= prompt("Please enter your name");
	let marks = prompt("Enter your marks");
	
	switch(true)
	{
		case marks>90 && marks<=100:
			results="Great! Topper");
			break;
		case marks>65 && marks<=90:
			results="Great! 1st class");
			break;
		case marks>40 && marks<=65:
			results="Great! 2nd class");
			break;
		case marks>0 && marks<=40:
			results="No Problem, try next time!");
			break;
		default:
			results="Invalid marks";
			break;
	}
	document.write("Hello "+ name +","+ results);
---------------------
Functions
	Syntax function definition:
		function functionName()
		{
			statements
		}
	Syntax function calling:
		functionName();
	
	Example-1:
		function wish()
		{
			alert("Hello, Good Day!");
		}
	
		wish();

-----------------------------------------	
1) Function Expression
2) Anonymous Functions
3) Functions with parameters and Return values

Example:
	var a=function wishMe()
	  {
		document.write("Good Day!");
	  }

	wishMe();//no output
	a();
	
Example:
	var b =function()
		{
			document.write(This is anonymous function");
		}
	b();

function add(a,b)
{
	return a+b;
}	

results=add(10,20);
document.write("Results"+results);
-----------------------------------------		
Scopes in javascript:
	1) Global Scope
	2) Function Scope
	3) Block scope
	
	
	//global scope
	var apple="red";
	let orange="yellow";
	const banana="green";
	
	function fruit()
	{
		//function scope
		var x =100;
		let y =200;
		const z=300;
		
		document.write(apple);
		document.write(x);
		
		if(x<y)
		{
			//block scope with let,const
			let a=10;
			const b=10;
			var c=20;
			
			document.write(a);
			document.write(b);
			document.write(c);
		}
		document.write(c);//no error : limitation of block scope with var 
		document.write(a);//error
		document.write(b);//error
	}
	
	fruit();
	document.write(x);//error
-----------------------------------------
Methods in JavaScript:
1a) Arrays Methods: Dot notation
	
	Example:
		let collections=["Ravi", 35, true, {city:"hyd"}]

	Array methods:
	push(),pop(),shift(),unshift(),concate(),join(),slice(),splice(),indexOf(),forEach().
		push(): adds an element at the end of array and returns the new lenght of array.
			collections.push("hi");
		
		pop(): removes an element at the end of array and returns that element.
			collections.pop();
		
		shift():removes 1st element of array and returns that element.
			collections.shift();
		
		unshift(): adds one or more elements to the starting of the array and returns the new length
			collections.unshift(10,20);
		
		document.write(collections);
		document.write(collections.length);

		concat(): Combines two or more arrays and returns a new array.
		
		let nums1=[1,2,3];
		let nums2=[1,2,3];
		let nums3=nums1.concat(nums2);
		
		join(): creates new string by concatenating all the elements of an array and return a string by a specified separator.
		let allAsString=nums1.join(",");
		
		splice(startPoint,endPoint): return a shallow copy of a portition of an array into a new array.
		let nums1=[1,2,3,"A","b","c"];
		let n1s=nums1.slice(0,3);
		
		splice(): Changes the content of an array by removing, replacing, or adding elements.
		let myNumbers=[10,20,30,40,50,60,70,80];
		let myNewNumbers1=myNumbers.splice(0,4);-----------10,20,30,40 removed 0 to 3rd index data as mentioned 0 to 4.
						  myNumbers------------------50,60,70,80
						  myNewNumbers1=10,20,30,40
		
		let myNumbers=[10,20,30,40,50,60,70,80];		
		let myNewNumbers1=myNumbers.splice(0,4,"something to see");-----------10,20,30,40 removed 0 to 3rd index data as mentioned 0 to 4 and replace by "somethig to see"
						  myNumbers------------------"something to see", 50,60,70,80
						  myNewNumbers1-----------10,20,30,40
						  
						  
		let myNumbers=[10,20,30,40,50,60,70,80];
		let myNewNumbers1=myNumbers.splice(4,1,"starts in sky");-----------from 4th index to next 1 elements remove and add "starts in sky" 
						  myNumbers------------------50
						  myNewNumbers1-----------10,20,30,40,starts in sky,60,70,80

		let myNumbers=[10,20,30,40,50,60,70,80];
		let myNewNumbers1=myNumbers.splice(4,0,"starts in sky");-----------from 4th index to next 0 elements remove and add "starts in sky" 
						  myNumbers------------------
						  myNewNumbers1-----------10,20,30,40,starts in sky,50,60,70,80
						  
		document.write(myNumbers);
		
		let myNumbers = [10, 20, 30, 40, 50, 60, 70, 80];
		let idx = myNumbers.indexOf(50); ---------4

		let myNumbers = [10, 20, 30, 40, 50, 60, 70, 80];
    	myNumbers.forEach((item) => {
        	document.write("<br/> ", item);
    	});

		myNumbers.forEach((item, index) => {
        	document.write("<br/> index:", index, "-- element:", item);
    	});

1b) Multi-Dimensional Arrays
	let myNumbers = [10, 20, 30, 40, 50, 60, 70, 80];
	 let data = myNumbers[4]
    document.write("<br/>4th possion element: ", data);


	let myTable = [
        [1, 2, 3, 4, 5],
        [10, 20, 30, 40, 50],
        [0, 1, 0, 1, 0]
    ];
	document.write("<br/>initial myTable[1][4] data :", myTable[1][4]);
    myTable.forEach(
        (item, index) => {
            document.write("<br/> ", index, " item:", item);
            if (index == 1) {
                document.write("<br/> ", item[4]);
            }
        }
    )

2) String Methods:
	split(), trim(), charAt(), subString(), replace(), toUpperCase(), toLowerCase()....

3) Object Methods

4) Loops:
	for
	while
	do-while
	forEach
	for-in

5) DOM Manipulation By Methods
	getElementById()
	getElementsByClassName()
	getElementByTagName()

	querySelector()
	querySelectorAll()
	setAttribute()
	removeAttribute()

6) DOM Manipulation By 	Properties
	innerText
	innerHTML
	textContent
	value
	name
	attribute
	getAttribute
	setAttribute

* Difference between innerText, textContext
  innerText: will consider existed css styles
  textContext:will ignore existed css styles
	
7) HTML Attributes
	scr
	id
	class
	style
	alt
	lang
	dir
	href
	width & height

8) Events & Event Listeners:
An event in JavaScript refers to any interaction or occurrence that happens in the browser.
An event listener is a JavaScript function that "listens" for specific events and executes a function when that event occurs.

Mouse Events:
	click: Triggered when an element is clicked.
	dblclick: Triggered when an element is double-clicked.
	mouseover: Triggered when the mouse pointer enters an element.
	mouseout: Triggered when the mouse pointer leaves an element.
	mousemove: Triggered when the mouse moves within an element.
	mouseenter: Triggered when the mouse pointer enters an element, does not bubble.
	mouseleave: Triggered when the mouse pointer leaves an element, does not bubble.
	mousedown: Triggered when a mouse button is pressed down on an element.
	mouseup: Triggered when a mouse button is released on an element.
	contextmenu: Triggered when the right mouse button is clicked (context menu).

Keyboard Events:
	keydown: Triggered when a key is pressed down.
	keyup: Triggered when a key is released.
	keypress: Triggered when a key is pressed and released (deprecated in modern browsers, use keydown and keyup).

Form Events:
	submit: Triggered when a form is submitted.
	change: Triggered when the value of an input, select, or textarea element changes.
	focus: Triggered when an element gains focus.
	blur: Triggered when an element loses focus.
	input: Triggered when the value of an input or textarea changes.
	reset: Triggered when a form is reset.
	select: Triggered when the user selects text inside an input or textarea field.

Window Events:
	load: Triggered when the document, an image, or other resource finishes loading.
	resize: Triggered when the window is resized.
	scroll: Triggered when the user scrolls the page or an element.
	unload: Triggered when the document or window is being unloaded.
	beforeunload: Triggered before the window is unloaded, can be used to prompt users for confirmation.
	focus: Triggered when the window or document gains focus.
	blur: Triggered when the window or document loses focus.

Clipboard Events:
	copy: Triggered when content is copied to the clipboard.
	cut: Triggered when content is cut from the document.
	paste: Triggered when content is pasted from the clipboard.

Touch Events (for mobile devices):
	touchstart: Triggered when the user touches the screen.
	touchend: Triggered when the user removes their finger from the screen.
	touchmove: Triggered when the user moves their finger across the screen.
	touchcancel: Triggered when the touch event is interrupted.

Pointer Events (for devices with a pointing device, like a mouse, pen, or touch):
	pointerdown: Triggered when a pointing device button is pressed.
	pointerup: Triggered when a pointing device button is released.
	pointermove: Triggered when the pointing device moves.
	pointerenter: Triggered when the pointer enters an element.
	pointerleave: Triggered when the pointer leaves an element.
	pointercancel: Triggered when the pointer event is canceled.

Drag and Drop Events:
	dragstart: Triggered when a drag operation starts.
	dragend: Triggered when a drag operation ends.
	dragenter: Triggered when a dragged item enters a valid drop target.
	dragleave: Triggered when a dragged item leaves a valid drop target.
	dragover: Triggered when an item is being dragged over a valid drop target.
	drop: Triggered when the dragged item is dropped onto a valid drop target.

Media Events:
	play: Triggered when a media element starts playing.
	pause: Triggered when a media element is paused.
	ended: Triggered when the media element finishes playing.
	volumechange: Triggered when the volume of a media element changes.
	timeupdate: Triggered as the media element’s playback position changes.
	progress: Triggered when the browser is loading a media element.
	seeked: Triggered when a seek operation on a media element finishes.
	seeking: Triggered when a seek operation starts on a media element.

Animation and Transition Events:
	animationstart: Triggered when a CSS animation starts.
	animationend: Triggered when a CSS animation ends.
	animationiteration: Triggered when a CSS animation iteration ends.
	transitionstart: Triggered when a CSS transition starts.
	transitionend: Triggered when a CSS transition ends.
	transitioncancel: Triggered if a CSS transition is canceled before it completes.

Focus Events:
	focusin: Triggered when an element or any of its descendants receives focus (bubbles).
	focusout: Triggered when an element or any of its descendants loses focus (bubbles).

Other Event Types:
	hashchange: Triggered when the URL fragment identifier (the part of the URL after #) changes.
	popstate: Triggered when the active history entry changes (i.e., the state of the browser’s session history).
	message: Triggered when a message is received from another window or an iframe.
	error: Triggered when an error occurs (e.g., failed to load a resource like an image).
	focus: Triggered when an element gains focus.
	visibilitychange: Triggered when the visibility state of the document changes (for example, when the page is hidden or visible).
	storage: Triggered when a change is made to localStorage or sessionStorage.

Event Propagation Methods:
	stopPropagation: Prevents further propagation of the current event in the capturing and bubbling phases.
	stopImmediatePropagation: Prevents other listeners of the same event from being called.
	preventDefault: Prevents the default action associated with the event (e.g., navigating to a link).

Mouse Wheel Events:
	wheel: Triggered when the mouse wheel is used (to scroll).
	Pointer Lock API Events:
	pointerlockchange: Triggered when the pointer lock state changes.
	pointerlockerror: Triggered if there is an error trying to lock the pointer.
	
Date object and its methods:


Date object methods:
--------------------

let currDate = new Date();
	currDate.getDate(): 24
	currDate.getTime(): 1740358451873
	currDate.getFullYear() 2025
	currDate.getMonth() month starts with 0 indexes: 1
	currDate.getDay() 1
	currDate.getHours(): 6
	currDate.getMinutes(): 24
	currDate.getSeconds(): 11
	currDate.getMilliseconds(): 873
	currDate.toLocaleDateString(): 2/24/2025

let specificDate = new Date("2025-02-24T10:00:01");
	Specified Date: Mon Feb 24 2025 10:00:01 GMT+0530 (India Standard Time)


// Run a function after 3 seconds
	setTimeout(() => {
    	console.log("3 seconds passed");
	}, 3000);

// Run a function every 1 seconds
	setInterval(() => {
    	console.log("2 seconds passed");
    	dateId.textContent = new Date();
	}, 1000);


DOM classList:
-------------
The classList property in JavaScript allows you to work with the classes of an HTML element. 
It provides several useful methods to add, remove, toggle, and check for classes.


Math class:
----------
Math.abs() – Returns the absolute value of a number.
Math.round() – Rounds a number to the nearest integer.
Math.ceil() – Rounds a number UP to the nearest integer.
Math.floor() – Rounds a number DOWN to the nearest integer.
Math.max() – Returns the largest of zero or more numbers.
Math.min() – Returns the smallest of zero or more numbers.
Math.random() – Generates a random number between 0 (inclusive) and 1 (exclusive).
Math.pow() – Returns the base raised to the exponent power.
Math.sqrt() – Returns the square root of a number.


Objects in JavaScript:
---------------------
 An object is a collection of key-value pairs where the keys (also called "properties") are strings, and the values can be any data type (strings, numbers, arrays, functions, or even other objects).

1. Creating an Object

Object Literal Syntax:
---------------------
let person = {
    name: "John",
    age: 30,
    gender: "Male"
};

console.log(person);  // Output: { name: 'John', age: 30, gender: 'Male' }

Constructor Syntax:
-----------------
let person = new Object();
person.name = "John";
person.age = 30;
person.gender = "Male";

console.log(person);  // Output: { name: 'John', age: 30, gender: 'Male' }


2. Accessing Object Properties
Using Dot Notation:
------------------
console.log(person.name);   // Output: John
console.log(person.age);    // Output: 30

Using Bracket Notation:
----------------------
console.log(person["name"]);   // Output: John
console.log(person["age"]);    // Output: 30

3. Modifying Object Properties

person.age = 31;
console.log(person.age);  // Output: 31

4. Deleting Object Properties
 delete person.gender;
console.log(person);  // Output: { name: 'John', age: 31, email: 'john@example.com' }

5. Iterating Over Object Properties

for (let key in person) {
    console.log(key + ": " + person[key]);
}
// Output:
// name: John
// age: 31
// email: john@example.com

		
6. Object Methods
let person = {
    name: "John",
    age: 30,
    greet: function() {
        return `Hello, my name is ${this.name}.`;
    }
};

console.log(person.greet());  // Output: Hello, my name is John.

You can also use ES6 shorthand for defining methods:

let person = {
    name: "John",
    age: 30,
    greet() {
        return `Hello, my name is ${this.name}.`;
    }
};

console.log(person.greet());  // Output: Hello, my name is John.

7. Nested Objects
let person = {
    name: "John",
    address: {
        street: "123 Main St",
        city: "New York",
        zip: "10001"
    }
};

console.log(person.address.city);  // Output: New York

8. Object Destructuring
let person = {
    name: "John",
    age: 30,
    gender: "Male"
};

// Destructuring object properties
let { name, age } = person;
console.log(name);  // Output: John
console.log(age);   // Output: 30

9. Checking if a Property Exists
let person = {
    name: "John",
    age: 30
};

console.log("name" in person);  // Output: true
console.log("gender" in person);  // Output: false

You can also use hasOwnProperty() to check if the property belongs to the object directly (not inherited):
console.log(person.hasOwnProperty("name"));  // Output: true
console.log(person.hasOwnProperty("gender"));  // Output: false

	
	


